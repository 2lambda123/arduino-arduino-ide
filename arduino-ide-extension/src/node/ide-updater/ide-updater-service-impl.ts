import { injectable } from '@theia/core/shared/inversify';
import { GenericServerOptions } from 'builder-util-runtime';
import {
  AppUpdater,
  AppImageUpdater,
  MacUpdater,
  NsisUpdater,
  UpdateInfo,
  CancellationToken,
} from 'electron-updater';
import {
  IDEUpdaterService,
  IDEUpdaterServiceClient,
} from '../../common/protocol/ide-updater-service';
import fetch, { Response } from 'node-fetch';
import { UpdateChannel } from '../../browser/arduino-preferences';

const CHANGELOG_BASE_URL = 'https://downloads.arduino.cc/arduino-ide/changelog';

@injectable()
export class IDEUpdaterServiceImpl implements IDEUpdaterService {
  private updater: AppUpdater;
  private cancellationToken?: CancellationToken;
  protected theiaFEClient?: IDEUpdaterServiceClient;

  init(channel: UpdateChannel) {
  const options: GenericServerOptions = {
      provider: 'generic',
      url: `https://downloads.arduino.cc/arduino-ide/${
        channel === UpdateChannel.Nightly ? 'nightly/test/' : ''
      }`,
      channel,
    };

    if (process.platform === 'win32') {
      this.updater = new NsisUpdater(options);
    } else if (process.platform === 'darwin') {
      this.updater = new MacUpdater(options);
    } else {
      this.updater = new AppImageUpdater(options);
    }
    this.updater.autoDownload = false;
    this.updater.fullChangelog = true;

    this.updater.on('checking-for-update', (e) =>
      this.theiaFEClient?.notifyCheckingForUpdate(e)
    );
    this.updater.on('update-available', (e) =>
      this.theiaFEClient?.notifyUpdateAvailable(e)
    );
    this.updater.on('update-not-available', (e) =>
      this.theiaFEClient?.notifyUpdateNotAvailable(e)
    );
    this.updater.on('download-progress', (e) =>
      this.theiaFEClient?.notifyDownloadProgressChanged(e)
    );
    this.updater.on('update-downloaded', (e) =>
      this.theiaFEClient?.notifyDownloadFinished(e)
    );
    this.updater.on('error', (e) => this.theiaFEClient?.notifyError(e));
  }

  setClient(client: IDEUpdaterServiceClient | undefined): void {
    this.theiaFEClient = client;
  }

  dispose(): void {
    throw new Error('Method not implemented.');
  }

  async checkForUpdates(): Promise<UpdateInfo | void> {
    const {
      updateInfo,
      cancellationToken,
    } = await this.updater.checkForUpdates();

    this.cancellationToken = cancellationToken;
    if (
      this.updater.currentVersion.compare(updateInfo.version) === -1 ||
      true
    ) {
      /*
        'latest.txt' points to the latest changelog that has been generated by the CI,
        so we need to make a first GET request to get the filename of the changelog
        and a second GET to the actual changelog file
      */
      try {
        let response: Response | null = await fetch(
          `${CHANGELOG_BASE_URL}/latest.txt`
        );
        const latestChangelogFileName = response.ok
          ? await response.text()
          : null;
        response = latestChangelogFileName
          ? await fetch(`${CHANGELOG_BASE_URL}/${latestChangelogFileName}`)
          : null;
        const changelog = response?.ok ? await response?.text() : null;

        // We only want to see the release notes of newer versions
        const currentVersionIndex = changelog?.indexOf(
          `\r\n\r\n---\r\n\r\n## ${this.updater.currentVersion}\r\n\r\n`
        );
        const newChangelog =
          currentVersionIndex && currentVersionIndex > 0
            ? changelog?.slice(0, currentVersionIndex)
            : changelog;
        updateInfo.releaseNotes = newChangelog;
      } catch {
        /*
          if the request for the changelog fails, we'll just avoid to show it
          to the user, but we will still show the update info
        */
      }
      return updateInfo;
    }
  }

  async downloadUpdate(): Promise<void> {
    try {
      await this.updater.downloadUpdate(this.cancellationToken);
    } catch (e) {
      if (e.message === 'cancelled') return;
      throw e;
    }
  }

  stopDownload(): void {
    this.cancellationToken?.cancel();
  }

  quitAndInstall(): void {
    this.updater.quitAndInstall();
  }
}
