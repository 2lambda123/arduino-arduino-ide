/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
var board_pb = require('./board_pb.js');
goog.object.extend(proto, board_pb);
var compile_pb = require('./compile_pb.js');
goog.object.extend(proto, compile_pb);
var core_pb = require('./core_pb.js');
goog.object.extend(proto, core_pb);
var upload_pb = require('./upload_pb.js');
goog.object.extend(proto, upload_pb);
var lib_pb = require('./lib_pb.js');
goog.object.extend(proto, lib_pb);
goog.exportSymbol('proto.arduino.Configuration', null, global);
goog.exportSymbol('proto.arduino.DestroyReq', null, global);
goog.exportSymbol('proto.arduino.DestroyResp', null, global);
goog.exportSymbol('proto.arduino.InitReq', null, global);
goog.exportSymbol('proto.arduino.InitResp', null, global);
goog.exportSymbol('proto.arduino.RescanReq', null, global);
goog.exportSymbol('proto.arduino.RescanResp', null, global);
goog.exportSymbol('proto.arduino.UpdateIndexReq', null, global);
goog.exportSymbol('proto.arduino.UpdateIndexResp', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arduino.Configuration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.arduino.Configuration.repeatedFields_, null);
};
goog.inherits(proto.arduino.Configuration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.arduino.Configuration.displayName = 'proto.arduino.Configuration';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.arduino.Configuration.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arduino.Configuration.prototype.toObject = function(opt_includeInstance) {
  return proto.arduino.Configuration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arduino.Configuration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arduino.Configuration.toObject = function(includeInstance, msg) {
  var f, obj = {
    datadir: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sketchbookdir: jspb.Message.getFieldWithDefault(msg, 2, ""),
    downloadsdir: jspb.Message.getFieldWithDefault(msg, 3, ""),
    boardmanageradditionalurlsList: jspb.Message.getRepeatedField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arduino.Configuration}
 */
proto.arduino.Configuration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arduino.Configuration;
  return proto.arduino.Configuration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arduino.Configuration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arduino.Configuration}
 */
proto.arduino.Configuration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatadir(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSketchbookdir(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDownloadsdir(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addBoardmanageradditionalurls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arduino.Configuration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arduino.Configuration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arduino.Configuration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arduino.Configuration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatadir();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSketchbookdir();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDownloadsdir();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBoardmanageradditionalurlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string dataDir = 1;
 * @return {string}
 */
proto.arduino.Configuration.prototype.getDatadir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.arduino.Configuration.prototype.setDatadir = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sketchbookDir = 2;
 * @return {string}
 */
proto.arduino.Configuration.prototype.getSketchbookdir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.arduino.Configuration.prototype.setSketchbookdir = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string downloadsDir = 3;
 * @return {string}
 */
proto.arduino.Configuration.prototype.getDownloadsdir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.arduino.Configuration.prototype.setDownloadsdir = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string boardManagerAdditionalUrls = 4;
 * @return {!Array<string>}
 */
proto.arduino.Configuration.prototype.getBoardmanageradditionalurlsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.arduino.Configuration.prototype.setBoardmanageradditionalurlsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.arduino.Configuration.prototype.addBoardmanageradditionalurls = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.arduino.Configuration.prototype.clearBoardmanageradditionalurlsList = function() {
  this.setBoardmanageradditionalurlsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arduino.InitReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arduino.InitReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.arduino.InitReq.displayName = 'proto.arduino.InitReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arduino.InitReq.prototype.toObject = function(opt_includeInstance) {
  return proto.arduino.InitReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arduino.InitReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arduino.InitReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    configuration: (f = msg.getConfiguration()) && proto.arduino.Configuration.toObject(includeInstance, f),
    libraryManagerOnly: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arduino.InitReq}
 */
proto.arduino.InitReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arduino.InitReq;
  return proto.arduino.InitReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arduino.InitReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arduino.InitReq}
 */
proto.arduino.InitReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.arduino.Configuration;
      reader.readMessage(value,proto.arduino.Configuration.deserializeBinaryFromReader);
      msg.setConfiguration(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLibraryManagerOnly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arduino.InitReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arduino.InitReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arduino.InitReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arduino.InitReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfiguration();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.arduino.Configuration.serializeBinaryToWriter
    );
  }
  f = message.getLibraryManagerOnly();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional Configuration configuration = 1;
 * @return {?proto.arduino.Configuration}
 */
proto.arduino.InitReq.prototype.getConfiguration = function() {
  return /** @type{?proto.arduino.Configuration} */ (
    jspb.Message.getWrapperField(this, proto.arduino.Configuration, 1));
};


/** @param {?proto.arduino.Configuration|undefined} value */
proto.arduino.InitReq.prototype.setConfiguration = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.arduino.InitReq.prototype.clearConfiguration = function() {
  this.setConfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arduino.InitReq.prototype.hasConfiguration = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool library_manager_only = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.arduino.InitReq.prototype.getLibraryManagerOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.arduino.InitReq.prototype.setLibraryManagerOnly = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arduino.InitResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.arduino.InitResp.repeatedFields_, null);
};
goog.inherits(proto.arduino.InitResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.arduino.InitResp.displayName = 'proto.arduino.InitResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.arduino.InitResp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arduino.InitResp.prototype.toObject = function(opt_includeInstance) {
  return proto.arduino.InitResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arduino.InitResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arduino.InitResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    instance: (f = msg.getInstance()) && common_pb.Instance.toObject(includeInstance, f),
    platformsIndexErrorsList: jspb.Message.getRepeatedField(msg, 2),
    librariesIndexError: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arduino.InitResp}
 */
proto.arduino.InitResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arduino.InitResp;
  return proto.arduino.InitResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arduino.InitResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arduino.InitResp}
 */
proto.arduino.InitResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Instance;
      reader.readMessage(value,common_pb.Instance.deserializeBinaryFromReader);
      msg.setInstance(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addPlatformsIndexErrors(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLibrariesIndexError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arduino.InitResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arduino.InitResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arduino.InitResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arduino.InitResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstance();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Instance.serializeBinaryToWriter
    );
  }
  f = message.getPlatformsIndexErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getLibrariesIndexError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Instance instance = 1;
 * @return {?proto.arduino.Instance}
 */
proto.arduino.InitResp.prototype.getInstance = function() {
  return /** @type{?proto.arduino.Instance} */ (
    jspb.Message.getWrapperField(this, common_pb.Instance, 1));
};


/** @param {?proto.arduino.Instance|undefined} value */
proto.arduino.InitResp.prototype.setInstance = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.arduino.InitResp.prototype.clearInstance = function() {
  this.setInstance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arduino.InitResp.prototype.hasInstance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string platforms_index_errors = 2;
 * @return {!Array<string>}
 */
proto.arduino.InitResp.prototype.getPlatformsIndexErrorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.arduino.InitResp.prototype.setPlatformsIndexErrorsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.arduino.InitResp.prototype.addPlatformsIndexErrors = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.arduino.InitResp.prototype.clearPlatformsIndexErrorsList = function() {
  this.setPlatformsIndexErrorsList([]);
};


/**
 * optional string libraries_index_error = 3;
 * @return {string}
 */
proto.arduino.InitResp.prototype.getLibrariesIndexError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.arduino.InitResp.prototype.setLibrariesIndexError = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arduino.DestroyReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arduino.DestroyReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.arduino.DestroyReq.displayName = 'proto.arduino.DestroyReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arduino.DestroyReq.prototype.toObject = function(opt_includeInstance) {
  return proto.arduino.DestroyReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arduino.DestroyReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arduino.DestroyReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    instance: (f = msg.getInstance()) && common_pb.Instance.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arduino.DestroyReq}
 */
proto.arduino.DestroyReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arduino.DestroyReq;
  return proto.arduino.DestroyReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arduino.DestroyReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arduino.DestroyReq}
 */
proto.arduino.DestroyReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Instance;
      reader.readMessage(value,common_pb.Instance.deserializeBinaryFromReader);
      msg.setInstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arduino.DestroyReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arduino.DestroyReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arduino.DestroyReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arduino.DestroyReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstance();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Instance.serializeBinaryToWriter
    );
  }
};


/**
 * optional Instance instance = 1;
 * @return {?proto.arduino.Instance}
 */
proto.arduino.DestroyReq.prototype.getInstance = function() {
  return /** @type{?proto.arduino.Instance} */ (
    jspb.Message.getWrapperField(this, common_pb.Instance, 1));
};


/** @param {?proto.arduino.Instance|undefined} value */
proto.arduino.DestroyReq.prototype.setInstance = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.arduino.DestroyReq.prototype.clearInstance = function() {
  this.setInstance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arduino.DestroyReq.prototype.hasInstance = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arduino.DestroyResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arduino.DestroyResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.arduino.DestroyResp.displayName = 'proto.arduino.DestroyResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arduino.DestroyResp.prototype.toObject = function(opt_includeInstance) {
  return proto.arduino.DestroyResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arduino.DestroyResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arduino.DestroyResp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arduino.DestroyResp}
 */
proto.arduino.DestroyResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arduino.DestroyResp;
  return proto.arduino.DestroyResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arduino.DestroyResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arduino.DestroyResp}
 */
proto.arduino.DestroyResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arduino.DestroyResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arduino.DestroyResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arduino.DestroyResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arduino.DestroyResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arduino.RescanReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arduino.RescanReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.arduino.RescanReq.displayName = 'proto.arduino.RescanReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arduino.RescanReq.prototype.toObject = function(opt_includeInstance) {
  return proto.arduino.RescanReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arduino.RescanReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arduino.RescanReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    instance: (f = msg.getInstance()) && common_pb.Instance.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arduino.RescanReq}
 */
proto.arduino.RescanReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arduino.RescanReq;
  return proto.arduino.RescanReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arduino.RescanReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arduino.RescanReq}
 */
proto.arduino.RescanReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Instance;
      reader.readMessage(value,common_pb.Instance.deserializeBinaryFromReader);
      msg.setInstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arduino.RescanReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arduino.RescanReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arduino.RescanReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arduino.RescanReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstance();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Instance.serializeBinaryToWriter
    );
  }
};


/**
 * optional Instance instance = 1;
 * @return {?proto.arduino.Instance}
 */
proto.arduino.RescanReq.prototype.getInstance = function() {
  return /** @type{?proto.arduino.Instance} */ (
    jspb.Message.getWrapperField(this, common_pb.Instance, 1));
};


/** @param {?proto.arduino.Instance|undefined} value */
proto.arduino.RescanReq.prototype.setInstance = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.arduino.RescanReq.prototype.clearInstance = function() {
  this.setInstance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arduino.RescanReq.prototype.hasInstance = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arduino.RescanResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.arduino.RescanResp.repeatedFields_, null);
};
goog.inherits(proto.arduino.RescanResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.arduino.RescanResp.displayName = 'proto.arduino.RescanResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.arduino.RescanResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arduino.RescanResp.prototype.toObject = function(opt_includeInstance) {
  return proto.arduino.RescanResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arduino.RescanResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arduino.RescanResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    platformsIndexErrorsList: jspb.Message.getRepeatedField(msg, 1),
    librariesIndexError: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arduino.RescanResp}
 */
proto.arduino.RescanResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arduino.RescanResp;
  return proto.arduino.RescanResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arduino.RescanResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arduino.RescanResp}
 */
proto.arduino.RescanResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPlatformsIndexErrors(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLibrariesIndexError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arduino.RescanResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arduino.RescanResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arduino.RescanResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arduino.RescanResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlatformsIndexErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getLibrariesIndexError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated string platforms_index_errors = 1;
 * @return {!Array<string>}
 */
proto.arduino.RescanResp.prototype.getPlatformsIndexErrorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.arduino.RescanResp.prototype.setPlatformsIndexErrorsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.arduino.RescanResp.prototype.addPlatformsIndexErrors = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.arduino.RescanResp.prototype.clearPlatformsIndexErrorsList = function() {
  this.setPlatformsIndexErrorsList([]);
};


/**
 * optional string libraries_index_error = 2;
 * @return {string}
 */
proto.arduino.RescanResp.prototype.getLibrariesIndexError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.arduino.RescanResp.prototype.setLibrariesIndexError = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arduino.UpdateIndexReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arduino.UpdateIndexReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.arduino.UpdateIndexReq.displayName = 'proto.arduino.UpdateIndexReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arduino.UpdateIndexReq.prototype.toObject = function(opt_includeInstance) {
  return proto.arduino.UpdateIndexReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arduino.UpdateIndexReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arduino.UpdateIndexReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    instance: (f = msg.getInstance()) && common_pb.Instance.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arduino.UpdateIndexReq}
 */
proto.arduino.UpdateIndexReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arduino.UpdateIndexReq;
  return proto.arduino.UpdateIndexReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arduino.UpdateIndexReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arduino.UpdateIndexReq}
 */
proto.arduino.UpdateIndexReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Instance;
      reader.readMessage(value,common_pb.Instance.deserializeBinaryFromReader);
      msg.setInstance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arduino.UpdateIndexReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arduino.UpdateIndexReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arduino.UpdateIndexReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arduino.UpdateIndexReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstance();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Instance.serializeBinaryToWriter
    );
  }
};


/**
 * optional Instance instance = 1;
 * @return {?proto.arduino.Instance}
 */
proto.arduino.UpdateIndexReq.prototype.getInstance = function() {
  return /** @type{?proto.arduino.Instance} */ (
    jspb.Message.getWrapperField(this, common_pb.Instance, 1));
};


/** @param {?proto.arduino.Instance|undefined} value */
proto.arduino.UpdateIndexReq.prototype.setInstance = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.arduino.UpdateIndexReq.prototype.clearInstance = function() {
  this.setInstance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arduino.UpdateIndexReq.prototype.hasInstance = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arduino.UpdateIndexResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arduino.UpdateIndexResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.arduino.UpdateIndexResp.displayName = 'proto.arduino.UpdateIndexResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arduino.UpdateIndexResp.prototype.toObject = function(opt_includeInstance) {
  return proto.arduino.UpdateIndexResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arduino.UpdateIndexResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arduino.UpdateIndexResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    downloadProgress: (f = msg.getDownloadProgress()) && common_pb.DownloadProgress.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arduino.UpdateIndexResp}
 */
proto.arduino.UpdateIndexResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arduino.UpdateIndexResp;
  return proto.arduino.UpdateIndexResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arduino.UpdateIndexResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arduino.UpdateIndexResp}
 */
proto.arduino.UpdateIndexResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.DownloadProgress;
      reader.readMessage(value,common_pb.DownloadProgress.deserializeBinaryFromReader);
      msg.setDownloadProgress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arduino.UpdateIndexResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arduino.UpdateIndexResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arduino.UpdateIndexResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arduino.UpdateIndexResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDownloadProgress();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.DownloadProgress.serializeBinaryToWriter
    );
  }
};


/**
 * optional DownloadProgress download_progress = 1;
 * @return {?proto.arduino.DownloadProgress}
 */
proto.arduino.UpdateIndexResp.prototype.getDownloadProgress = function() {
  return /** @type{?proto.arduino.DownloadProgress} */ (
    jspb.Message.getWrapperField(this, common_pb.DownloadProgress, 1));
};


/** @param {?proto.arduino.DownloadProgress|undefined} value */
proto.arduino.UpdateIndexResp.prototype.setDownloadProgress = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.arduino.UpdateIndexResp.prototype.clearDownloadProgress = function() {
  this.setDownloadProgress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arduino.UpdateIndexResp.prototype.hasDownloadProgress = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.arduino);
