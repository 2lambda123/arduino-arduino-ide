/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.arduino.CompileReq', null, global);
goog.exportSymbol('proto.arduino.CompileResp', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arduino.CompileReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.arduino.CompileReq.repeatedFields_, null);
};
goog.inherits(proto.arduino.CompileReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.arduino.CompileReq.displayName = 'proto.arduino.CompileReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.arduino.CompileReq.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arduino.CompileReq.prototype.toObject = function(opt_includeInstance) {
  return proto.arduino.CompileReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arduino.CompileReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arduino.CompileReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    instance: (f = msg.getInstance()) && common_pb.Instance.toObject(includeInstance, f),
    fqbn: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sketchpath: jspb.Message.getFieldWithDefault(msg, 3, ""),
    showproperties: jspb.Message.getFieldWithDefault(msg, 4, false),
    preprocess: jspb.Message.getFieldWithDefault(msg, 5, false),
    buildcachepath: jspb.Message.getFieldWithDefault(msg, 6, ""),
    buildpath: jspb.Message.getFieldWithDefault(msg, 7, ""),
    buildpropertiesList: jspb.Message.getRepeatedField(msg, 8),
    warnings: jspb.Message.getFieldWithDefault(msg, 9, ""),
    verbose: jspb.Message.getFieldWithDefault(msg, 10, false),
    quiet: jspb.Message.getFieldWithDefault(msg, 11, false),
    vidpid: jspb.Message.getFieldWithDefault(msg, 12, ""),
    exportfile: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arduino.CompileReq}
 */
proto.arduino.CompileReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arduino.CompileReq;
  return proto.arduino.CompileReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arduino.CompileReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arduino.CompileReq}
 */
proto.arduino.CompileReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Instance;
      reader.readMessage(value,common_pb.Instance.deserializeBinaryFromReader);
      msg.setInstance(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFqbn(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSketchpath(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShowproperties(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPreprocess(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuildcachepath(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuildpath(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addBuildproperties(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setWarnings(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVerbose(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setQuiet(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setVidpid(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setExportfile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arduino.CompileReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arduino.CompileReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arduino.CompileReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arduino.CompileReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstance();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.Instance.serializeBinaryToWriter
    );
  }
  f = message.getFqbn();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSketchpath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getShowproperties();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getPreprocess();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getBuildcachepath();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBuildpath();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getBuildpropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getWarnings();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getVerbose();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getQuiet();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getVidpid();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getExportfile();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional Instance instance = 1;
 * @return {?proto.arduino.Instance}
 */
proto.arduino.CompileReq.prototype.getInstance = function() {
  return /** @type{?proto.arduino.Instance} */ (
    jspb.Message.getWrapperField(this, common_pb.Instance, 1));
};


/** @param {?proto.arduino.Instance|undefined} value */
proto.arduino.CompileReq.prototype.setInstance = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.arduino.CompileReq.prototype.clearInstance = function() {
  this.setInstance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arduino.CompileReq.prototype.hasInstance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string fqbn = 2;
 * @return {string}
 */
proto.arduino.CompileReq.prototype.getFqbn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.arduino.CompileReq.prototype.setFqbn = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string sketchPath = 3;
 * @return {string}
 */
proto.arduino.CompileReq.prototype.getSketchpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.arduino.CompileReq.prototype.setSketchpath = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool showProperties = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.arduino.CompileReq.prototype.getShowproperties = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.arduino.CompileReq.prototype.setShowproperties = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool preprocess = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.arduino.CompileReq.prototype.getPreprocess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.arduino.CompileReq.prototype.setPreprocess = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string buildCachePath = 6;
 * @return {string}
 */
proto.arduino.CompileReq.prototype.getBuildcachepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.arduino.CompileReq.prototype.setBuildcachepath = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string buildPath = 7;
 * @return {string}
 */
proto.arduino.CompileReq.prototype.getBuildpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.arduino.CompileReq.prototype.setBuildpath = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated string buildProperties = 8;
 * @return {!Array<string>}
 */
proto.arduino.CompileReq.prototype.getBuildpropertiesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array<string>} value */
proto.arduino.CompileReq.prototype.setBuildpropertiesList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.arduino.CompileReq.prototype.addBuildproperties = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.arduino.CompileReq.prototype.clearBuildpropertiesList = function() {
  this.setBuildpropertiesList([]);
};


/**
 * optional string warnings = 9;
 * @return {string}
 */
proto.arduino.CompileReq.prototype.getWarnings = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.arduino.CompileReq.prototype.setWarnings = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bool verbose = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.arduino.CompileReq.prototype.getVerbose = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.arduino.CompileReq.prototype.setVerbose = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool quiet = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.arduino.CompileReq.prototype.getQuiet = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.arduino.CompileReq.prototype.setQuiet = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional string vidPid = 12;
 * @return {string}
 */
proto.arduino.CompileReq.prototype.getVidpid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.arduino.CompileReq.prototype.setVidpid = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string exportFile = 13;
 * @return {string}
 */
proto.arduino.CompileReq.prototype.getExportfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.arduino.CompileReq.prototype.setExportfile = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.arduino.CompileResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.arduino.CompileResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.arduino.CompileResp.displayName = 'proto.arduino.CompileResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.arduino.CompileResp.prototype.toObject = function(opt_includeInstance) {
  return proto.arduino.CompileResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.arduino.CompileResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arduino.CompileResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    outStream: msg.getOutStream_asB64(),
    errStream: msg.getErrStream_asB64(),
    downloadProgress: (f = msg.getDownloadProgress()) && common_pb.DownloadProgress.toObject(includeInstance, f),
    taskProgress: (f = msg.getTaskProgress()) && common_pb.TaskProgress.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.arduino.CompileResp}
 */
proto.arduino.CompileResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.arduino.CompileResp;
  return proto.arduino.CompileResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.arduino.CompileResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.arduino.CompileResp}
 */
proto.arduino.CompileResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOutStream(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setErrStream(value);
      break;
    case 3:
      var value = new common_pb.DownloadProgress;
      reader.readMessage(value,common_pb.DownloadProgress.deserializeBinaryFromReader);
      msg.setDownloadProgress(value);
      break;
    case 4:
      var value = new common_pb.TaskProgress;
      reader.readMessage(value,common_pb.TaskProgress.deserializeBinaryFromReader);
      msg.setTaskProgress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.arduino.CompileResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.arduino.CompileResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.arduino.CompileResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.arduino.CompileResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutStream_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getErrStream_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getDownloadProgress();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.DownloadProgress.serializeBinaryToWriter
    );
  }
  f = message.getTaskProgress();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.TaskProgress.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes out_stream = 1;
 * @return {!(string|Uint8Array)}
 */
proto.arduino.CompileResp.prototype.getOutStream = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes out_stream = 1;
 * This is a type-conversion wrapper around `getOutStream()`
 * @return {string}
 */
proto.arduino.CompileResp.prototype.getOutStream_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOutStream()));
};


/**
 * optional bytes out_stream = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOutStream()`
 * @return {!Uint8Array}
 */
proto.arduino.CompileResp.prototype.getOutStream_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOutStream()));
};


/** @param {!(string|Uint8Array)} value */
proto.arduino.CompileResp.prototype.setOutStream = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes err_stream = 2;
 * @return {!(string|Uint8Array)}
 */
proto.arduino.CompileResp.prototype.getErrStream = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes err_stream = 2;
 * This is a type-conversion wrapper around `getErrStream()`
 * @return {string}
 */
proto.arduino.CompileResp.prototype.getErrStream_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getErrStream()));
};


/**
 * optional bytes err_stream = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getErrStream()`
 * @return {!Uint8Array}
 */
proto.arduino.CompileResp.prototype.getErrStream_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getErrStream()));
};


/** @param {!(string|Uint8Array)} value */
proto.arduino.CompileResp.prototype.setErrStream = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional DownloadProgress download_progress = 3;
 * @return {?proto.arduino.DownloadProgress}
 */
proto.arduino.CompileResp.prototype.getDownloadProgress = function() {
  return /** @type{?proto.arduino.DownloadProgress} */ (
    jspb.Message.getWrapperField(this, common_pb.DownloadProgress, 3));
};


/** @param {?proto.arduino.DownloadProgress|undefined} value */
proto.arduino.CompileResp.prototype.setDownloadProgress = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.arduino.CompileResp.prototype.clearDownloadProgress = function() {
  this.setDownloadProgress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arduino.CompileResp.prototype.hasDownloadProgress = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TaskProgress task_progress = 4;
 * @return {?proto.arduino.TaskProgress}
 */
proto.arduino.CompileResp.prototype.getTaskProgress = function() {
  return /** @type{?proto.arduino.TaskProgress} */ (
    jspb.Message.getWrapperField(this, common_pb.TaskProgress, 4));
};


/** @param {?proto.arduino.TaskProgress|undefined} value */
proto.arduino.CompileResp.prototype.setTaskProgress = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.arduino.CompileResp.prototype.clearTaskProgress = function() {
  this.setTaskProgress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.arduino.CompileResp.prototype.hasTaskProgress = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.arduino);
